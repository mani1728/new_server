# version: "3.9"  # نسخه فرمت Compose

services:
  # --- Portainer (اختیاری: برای مدیریت Docker) ---
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: always
    ports:
      # - "9000:9000"            # HTTP (در صورت نیاز)
      - "9443:9443"              # HTTPS UI
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # دسترسی به Docker Host
      - portainer:/data                            # داده‌های Portainer پایدار
      - /etc/timezone:/etc/timezone:ro             # همسان‌سازی TZ
      - /etc/localtime:/etc/localtime:ro
    environment:
      PORTAINER_HTTPS_PORT: "${PORTAINER_HTTPS_PORT}"
      PORTAINER_ADMIN_PASSWORD: "${PORTAINER_ADMIN_PASSWORD}"
      PORTAINER_EDGE: 0
      LOG_LEVEL: "${LOG_LEVEL}"
    networks:
      - internal_net

  # --- InfluxDB 3 Core (نسخه صحیح v3 ؛ پورت 8181) ---
  influx-db:
    image: influxdb:3.4.1-core
    container_name: influx-db
    restart: always
    ports:
      - "8181:8181"  # پورت HTTP/REST اصلی InfluxDB 3 Core
    # از آرایه command استفاده می‌کنیم تا خواناتر باشد
    command:
      - influxdb3          # باینری اصلی
      - serve              # حالت سرویس
      - --node-id=influxdb-01
      - --object-store=file               # ذخیره‌سازی فایل‌محور (لوکال)
      - --data-dir=/var/lib/influxdb3/data
      - --plugin-dir=/var/lib/influxdb3/plugins
      - --http-bind=0.0.0.0:8181          # اطمینان از بایند روی همه اینترفیس‌ها
      - --admin-token-file=/secrets/admin-token.json  # توکن آفلاین (فقط استارت اول)
    environment:
      # سطح لاگ کلی (info|debug)
      LOG_FILTER: "${LOG_LEVEL:-info}"
      # تایم‌زون برای سازگاری لاگ‌ها
      TZ: "${TZ}"
      # معادل‌های env برای شفافیت (در صورت حذف از command هم کار می‌کنند)
      INFLUXDB3_OBJECT_STORE: "file"
      INFLUXDB3_DB_DIR: "/var/lib/influxdb3/data"
      INFLUXDB3_HTTP_BIND_ADDR: "0.0.0.0:8181"
      INFLUXDB3_ADMIN_TOKEN_FILE: "/secrets/admin-token.json"
    volumes:
      - influx-db:/var/lib/influxdb3        # داده‌های پایدار InfluxDB
      - /opt/influxdb3/secrets/admin-token.json:/secrets/admin-token.json:ro  # توکن آفلاین فقط خواندنی
    networks:
      - internal_net
      - db_net

  # --- InfluxDB 3 Explorer (رسمی InfluxData) ---
  influxdb3-explorer:
    image: influxdata/influxdb3-ui:1.0.0
    container_name: influxdb3-explorer
    restart: unless-stopped
    command: ["--mode=admin"]   # admin: ساخت DB، مدیریت کانکشن‌ها، ویرایش و...
    ports:
      - "${EXPLORER_HTTP_PORT:-8888}:80"        # UI وب
      - "${EXPLORER_ADMIN_API_PORT:-8889}:8888" # API داخلی Explorer (برای admin mode)
      # اگر HTTPS می‌خواهی، 443 را هم مپ کن و ولوم ssl را فعال کن:
      # - "${EXPLORER_HTTPS_PORT:-8443}:443"
    environment:
      # حتماً در محیط‌های واقعی یک کلید بلند و تصادفی ست کن
      SESSION_SECRET_KEY: "${EXPLORER_SESSION_SECRET_KEY}"
      # مسیر پایگاه SQLite داخل کانتینر (حاوی سشن/تنظیمات Explorer)
      DATABASE_URL: "/db/sqlite.db"
      # مسیرهای سفارشی TLS در صورت نیاز:
      # SSL_CERT_PATH: "/etc/nginx/ssl/server.crt"
      # SSL_KEY_PATH:  "/etc/nginx/ssl/server.key"
    volumes:
      - influxdb3-explorer:/db:rw                 # ← والیوم نام‌دار محلی (درخواست شما)
      - /opt/influxdb3/explorer-config:/app-root/config:ro
      # پیکربندی آمادهٔ Connection ها (اختیاری؛ اگر config.json داری فعال کن)
      - ./explorer/config:/app-root/config:ro
      # گواهی SSL سفارشی (اختیاری؛ اگر HTTPS می‌خواهی فعال کن)
      # - ./explorer/ssl:/etc/nginx/ssl:ro
    networks:
      - internal_net   # روی همین شبکه، سرویس influx-db با نام سرویس قابل دسترس است

  minio:
    image: minio/minio:latest
    container_name: minIO
    ports:
      # پورت API برای دسترسی برنامه‌ها
      - "9000:9000"
      # پورت کنسول وب برای مدیریت
      - "9001:9001"
    environment:
      # !!! هشدار: این مقادیر را حتما عوض کنید !!!
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    restart: always
    networks:
      - internal_net
    volumes:
      # اتصال 10 والیوم به 10 مسیر مختلف در داخل کانتینر
      - minio-data1:/data1
      - minio-data2:/data2
      - minio-data3:/data3
      - minio-data4:/data4
      - minio-data5:/data5
      - minio-data6:/data6
      - minio-data7:/data7
      - minio-data8:/data8
      - minio-data9:/data9
      - minio-data10:/data10
    # این دستور حالت توزیع‌شده (Distributed) را با 10 دیسک فعال می‌کند
    command: server /data1 /data2 /data3 /data4 /data5 /data6 /data7 /data8 /data9 /data10 --console-address ":9001"

  elasticsearch:
    image: elasticsearch:9.1.3
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - xpack.security.http.ssl.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - TZ=${TZ}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    networks:
      - internal_net
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200 >/dev/null || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 10
    restart: always

  kibana:
    image: kibana:9.1.3
    container_name: kibana
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=${ELASTIC_HOST}
      # - ELASTICSEARCH_USERNAME=${ELASTIC_USERNAME}
      # - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - TZ=${TZ}
      - ELASTICSEARCH_SERVICEACCOUNTTOKEN=${KIBANA_SA_TOKEN}
          # کلیدهای ضروری:
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${KIBANA_ENCRYPTION_KEY}
      # پیشنهاد می‌کنم این دوتا هم ست کنی که بعداً گیر ندی:
      - XPACK_SECURITY_ENCRYPTIONKEY=${KIBANA_SECURITY_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${KIBANA_REPORTING_KEY}
    ports:
      - "5601:5601"
    networks:
      - internal_net
    restart: always

  fleet-server:
    image: elastic/elastic-agent:9.1.3
    container_name: fleet-server
    ports:
      - "8220:8220"
    environment:
      FLEET_SERVER_ENABLE: "true"
      FLEET_SERVER_HOST: "0.0.0.0"
      FLEET_SERVER_PORT: "8220"
      KIBANA_FLEET_USERNAME: ${ELASTIC_USERNAME}
      KIBANA_FLEET_PASSWORD: ${ELASTIC_PASSWORD}
      # اتصال به ES (بدون TLS)
      FLEET_SERVER_ELASTICSEARCH_HOST: "http://elasticsearch:9200"
      FLEET_SERVER_ELASTICSEARCH_INSECURE: "true"

      # HTTP اجباری برای Fleet Server
      FLEET_SERVER_INSECURE_HTTP: "true"

      # توکن سرویس که از ES گرفتی
      FLEET_SERVER_SERVICE_TOKEN: "${FLEET_SERVER_SERVICE_TOKEN}"

      # ستاپ اولیه Fleet در Kibana
      KIBANA_FLEET_SETUP: "true"
      KIBANA_HOST: "http://kibana:5601"
      KIBANA_INSECURE: "true"
      KIBANA_FLEET_SERVICE_TOKEN: "${FLEET_SERVER_SERVICE_TOKEN}"

      TZ: "${TZ}"

    depends_on:
      elasticsearch:
        condition: service_started
        required: true
      kibana:
        condition: service_started
        required: true
    networks:
      - internal_net
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8220/api/status >/dev/null || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 10

  elastic-agent:
    image: elastic/elastic-agent:9.1.3
    container_name: elastic-agent
    environment:
      - FLEET_ENROLL=1
      - FLEET_URL=http://fleet-server:8220
      - FLEET_INSECURE=true             # چون Fleet Server بدون TLS است
      - FLEET_ENROLLMENT_TOKEN=${ENROLLMENT_TOKEN}
      - ELASTICSEARCH_HOST=http://elasticsearch:9200
      - KIBANA_HOST=http://kibana:5601
      - TZ=${TZ}
    volumes:
      # برای لاگ‌های داکر و متریک‌ها:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      # برای System integration (لاگ‌های syslog/journald در صورت نیاز):
      - /var/log:/var/log:ro
    depends_on:
      fleet-server:
        condition: service_started
        required: true
    networks:
      - internal_net
    restart: always

# --- تعریف والیوم‌های نام‌دار (همه external چون قبلاً ساختی) ---
volumes:
  portainer:
    external: true
  elasticsearch:
    external: true
  influx-db:
    external: true
  influxdb3-explorer:
    external: true
  minio-data1:
    external: true
  minio-data2:
    external: true
  minio-data3:
    external: true
  minio-data4:
    external: true
  minio-data5:
    external: true
  minio-data6:
    external: true
  minio-data7:
    external: true
  minio-data8:
    external: true
  minio-data9:
    external: true
  minio-data10:
    external: true

# --- شبکه‌ها (external چون قبلاً ساختی) ---
networks:
  internal_net:
    external: true
  db_net:
    external: true
